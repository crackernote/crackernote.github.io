<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Web Security on CrackerNote</title>
    <link>https://crackernote.github.io/tags/web-security/</link>
    <description>Recent content in Web Security on CrackerNote</description>
    <image>
      <title>CrackerNote</title>
      <url>https://crackernote.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://crackernote.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.127.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 20 Jul 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://crackernote.github.io/tags/web-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL Injection 취약점 점검</title>
      <link>https://crackernote.github.io/posts/sqli-%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%A0%90%EA%B2%80/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://crackernote.github.io/posts/sqli-%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%A0%90%EA%B2%80/</guid>
      <description>1️⃣ SQL Injection 취약점 점검 📜SQL Injection 에러 유/무 확인 취약점 유/무 확인 검색란의 경우, 연결연산자 사용 a. &amp;rsquo; &amp;rsquo; 로 사용하여 정상작동 한다면 (te&amp;rsquo; &amp;lsquo;st), Mysql b. &amp;lsquo;+&amp;rsquo; 로 사용하여 정상작동 한다면 (te&amp;rsquo;+&amp;lsquo;st), Mssql c. &amp;lsquo;||&amp;rsquo; 로 사용하여 정상작동 한다면 (te&amp;rsquo;||&amp;lsquo;st), Oracle 조건 구문 완성 📜방법론 1) 검색기능에 대한 취약점 점검
a. select * from board where title like &amp;lsquo;% &amp;lsquo;||(case when 1=1 then &amp;rsquo;test&amp;rsquo; else &amp;lsquo;aaaa&amp;rsquo; end)||&amp;rsquo; %&amp;rsquo;</description>
    </item>
    <item>
      <title>SQL Injection 우회기법</title>
      <link>https://crackernote.github.io/posts/sql-injection-%EC%9A%B0%ED%9A%8C%EA%B8%B0%EB%B2%95/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://crackernote.github.io/posts/sql-injection-%EC%9A%B0%ED%9A%8C%EA%B8%B0%EB%B2%95/</guid>
      <description>1️⃣ SQL Injection 우회기법 📜SQL Injection 공격시 공백 문자 필터링시 우회 방법 Tab : %09 - no=1%09or%09id=&amp;lsquo;admin&amp;rsquo;
Line Feed (\n): %0a - no=1%0aor%0aid=&amp;lsquo;admin&amp;rsquo;
Carrage Return(\r) : %0d - no=1%0dor%0did=&amp;lsquo;admin&amp;rsquo;
주석 : /**/ - no=1//or//id=&amp;lsquo;admin&amp;rsquo;
괄호 : () - no=(1)or(id=&amp;lsquo;admin&amp;rsquo;)
더하기 : + - no=1+or+id=&amp;lsquo;admin&amp;rsquo;</description>
    </item>
    <item>
      <title>MySQL</title>
      <link>https://crackernote.github.io/posts/mysql/</link>
      <pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://crackernote.github.io/posts/mysql/</guid>
      <description>1️⃣ MySQL MySQL의 Database, INFORMATION_SCHEMA를 사용하여 데이터베이스에 접근하는 방법에 대해 설명합니다.
📜Database Database: 필요한 데이터를 유기적으로 결합하여 저장한 집합체: 통합된 정보들을 저장하여 운영할 수 있는 공용 데이터들의 묶음 데이터베이스는(Database) 여러 사람이 공유하여 사용할 목적으로 통합, 관리하는 데이터의 집합입니다. 새로운 환경에서도 기존의 데이터를 효율적으로 사용할 수 있도록 데이터를 구조화하여 저장한 것입니다.
📜MySQL SQL은 Structured Query Language의 약자입니다. SQL은 데이터베이스에서 데이터를 정의, 조작, 제어하기 위해 사용하는 언어입니다. 그 중에서도 이 포스트는 MySQL 8.</description>
    </item>
    <item>
      <title>File Upload 취약점</title>
      <link>https://crackernote.github.io/posts/file-upload-%EC%B7%A8%EC%95%BD%EC%A0%90/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://crackernote.github.io/posts/file-upload-%EC%B7%A8%EC%95%BD%EC%A0%90/</guid>
      <description>1️⃣ File Upload 취약점 정리 📜**File Upload 취약점 - 서버에 악성스크립트 업로드 하는것
- web server에 업로드 할수 있느냐, WAS에 업로드하느냐가 엄청큰 차이다.
- PHP기반웹사이트이면 – PHP 파일 업로드
- ASP – ASP 기반 파일 업로드…
- JSP – JSP 기반 파일업로드.. 처리기 매핑에서 매핑되는 것들이 모두된다.
- 만약에 업로드후 열어봤을때 실행되지 않는다면??? à 텍스트로 뿌려주거나, 바이너리 파일로 다운로드된다.
- 컨설팅 과정
파일업로드 가능여부 확인(메뉴확인)
이미지 파일 업로드 후 경로 확인(허가된 파일) – Jpg,Gif…</description>
    </item>
  </channel>
</rss>
